{"version":3,"sources":["tmdb-search-logo.svg","components/Header/Header.js","components/Main/Main.js","components/Main/MovieRow/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","logo","width","alt","type","name","placeholder","onChange","id","genreSearch","style","color","genres","map","genre","index","value","key","Main","children","MovieRow","poster","overview","App","state","genreList","inputSearch","event","$","ajax","url","target","success","movie_data","_this","setState","results","error","xhr","status","err","console","GenreSearch","selectedValue","document","getElementById","data_genres","components_Header_Header","this","components_Main_Main","movie","Main_MovieRow_MovieRow","title","poster_path","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ab9b464.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tmdb-search-logo.02a9430b.svg\";","import React from 'react'\r\nimport logo from '../../tmdb-search-logo.svg'\r\nimport './Header.css'\r\n\r\nconst Header = (props) => {\r\n        return (\r\n            <div  className='Header'>\r\n                <div className='HeaderBody'>\r\n                    <img src={logo} width='100' alt=\"logo\"/>\r\n                    <h1 className='HeaderTitle'> The Movie DB Search</h1>\r\n                </div>\r\n                <input\r\n                    className='HeaderInputSearch'\r\n                    type='text'\r\n                    name='search'\r\n                    placeholder='Type the name of movie or choose from the genres below...'\r\n                    onChange={props.onChange}\r\n                /> <br/>\r\n                <select\r\n                    id='GenreList'\r\n                    onChange={props.genreSearch}\r\n                >\r\n                    <option style={{color:'#6e6c6c'}}> Choose genre...</option>\r\n                    {props.genres.map((genre, index) => {\r\n                        return(\r\n                            <option\r\n                                className='scrollList'\r\n                                value={genre.id}\r\n                                key={index}\r\n                            >{genre.name}\r\n                            </option>\r\n                        )\r\n                    })}\r\n                </select>\r\n                {/*<select*/}\r\n                    {/*id='Date'*/}\r\n                    {/*onChange={props.genreSearch}*/}\r\n                {/*>*/}\r\n                    {/*<option style={{color:'#6e6c6c'}}> Choose genre...</option>*/}\r\n                    {/*{props.genres.map((genre, index) => {*/}\r\n                        {/*return(*/}\r\n                            {/*<option*/}\r\n                                {/*className='scrollList'*/}\r\n                                {/*value={genre.id}*/}\r\n                                {/*key={index}*/}\r\n                            {/*>{genre.name}*/}\r\n                            {/*</option>*/}\r\n                        {/*)*/}\r\n                    {/*})}*/}\r\n                {/*</select><br/>*/}\r\n\r\n            </div>\r\n        )\r\n};\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport './Main.css'\r\n\r\nconst Main = props => (\r\n            <div >\r\n                <h1 className='MainTitle'>\r\n\r\n                </h1>\r\n                {props.children}\r\n            </div>\r\n        );\r\n\r\n\r\nexport default Main","import React from 'react'\r\nimport './MovieRow.css'\r\n\r\nconst MovieRow = props => (\r\n    <table className='MovieRow'>\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <img src={props.poster} alt=\"\"/>\r\n                </td>\r\n                <td>\r\n                    <p><strong>{props.name}</strong></p>\r\n                    <p>{props.overview}</p>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n);\r\n\r\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport $ from \"jquery\";\nimport Header from './components/Header/Header'\nimport Main from './components/Main/Main'\nimport MovieRow from './components/Main/MovieRow/MovieRow'\n\n\nclass App extends Component {\n    state = {\n        genres: [\n            {\"id\": 28, \"name\": \"Action\"},\n            {\"id\": 12, \"name\": \"Adventure\"},\n            {\"id\": 16, \"name\": \"Animation\"},\n            {\"id\": 35, \"name\": \"Comedy\"},\n            {\"id\": 80, \"name\": \"Crime\"},\n            {\"id\": 99, \"name\": \"Documentary\"},\n            {\"id\": 18, \"name\": \"Drama\"},\n            {\"id\": 10751, \"name\": \"Family\"},\n            {\"id\": 14, \"name\": \"Fantasy\"},\n            {\"id\": 36, \"name\": \"History\"},\n            {\"id\": 27, \"name\": \"Horror\"},\n            {\"id\": 10402, \"name\": \"Music\"},\n            {\"id\": 9648, \"name\": \"Mystery\"},\n            {\"id\": 10749, \"name\": \"Romance\"},\n            {\"id\": 878, \"name\": \"Science Fiction\"},\n            {\"id\": 10770, \"name\": \"TV Movie\"},\n            {\"id\": 53, \"name\": \"Thriller\"},\n            {\"id\": 10752, \"name\": \"War\"},\n            {\"id\": 37, \"name\": \"Western\"}\n        ],\n        genreList:[],\n    };\n\n    inputSearch = (event) => {\n        const UrlString = 'https://api.themoviedb.org/3/search/movie?api_key=5874acfd11651a28c55771624f7021f4&query=';\n\n        $.ajax({\n            url: UrlString + event.target.value,\n            success: (movie_data) =>{\n                this.setState(() =>({\n                    genreList: movie_data.results\n                }));\n            },\n            error: (xhr, status, err) => {\n                console.error('Failed to get data', xhr, status, err)\n            }\n        })\n    };\n\n     GenreSearch = () => {\n         let selectedValue = document.getElementById('GenreList').value;\n         const UrlGenres ='https://api.themoviedb.org/3/discover/movie?api_key=5874acfd11651a28c55771624f7021f4&language=en-US&sort_by=popularity.desc&with_genres=';\n\n         $.ajax({\n             url: UrlGenres + selectedValue,\n             success: (data_genres) => {\n                 this.setState(() =>({\n                     genreList: data_genres.results\n                 }));\n             },\n             error: (xhr, status, err) => {\n                 console.error('Failed to get data', xhr, status, err)\n             }\n         });\n    };\n\n\n  render() {\n      return (\n      <div className=\"App\" >\n        <Header\n            genres={this.state.genres}\n            genreSearch={this.GenreSearch}\n            onChange={this.inputSearch}\n        />\n          <Main>\n              {this.state.genreList.map((movie, index) => {\n                  return (\n                      <MovieRow\n                          name={movie.title}\n                          poster={'https://image.tmdb.org/t/p/w185'+ movie.poster_path}\n                          overview={movie.overview}\n                          key={index}/>\n                      )\n              })}\n          </Main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}